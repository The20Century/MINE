<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.app.mine.mapper.AuctionItemMapper">

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INCLUDE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

    <!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  QUERY  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 경매 아이템 ID로 조회 -->
    <select id="findAuctionItemById" resultType="auctionItemVO">
        select * from mine.tbl_auction_item
        where auction_item_id = #{auctionItemId}
    </select>

    <!-- 경매 아이템 전체 목록 조회 -->
    <select id="findAuctionItems" resultType="AuctionItemVO">
        SELECT
            AI.*,
            COALESCE(COUNT(DISTINCT(AJ.auction_join_id)),0) AS bid_count,
            COALESCE(COUNT(DISTINCT(tbl_like.user_id)),0) AS like_count,
            CASE
                WHEN COUNT(CASE WHEN tbl_like.user_id = 1 THEN 1 END) > 0
                THEN TRUE ELSE FAlSE
            END AS my_favorite_auction
        FROM tbl_auction_item AS AI
        LEFT JOIN tbl_auction_join AS AJ
            ON AI.auction_item_id = AJ.auction_item_id
        LEFT JOIN tbl_like
            ON AI.auction_item_id = tbl_like.auction_item_id
        GROUP BY AI.auction_item_id

        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <!-- 카테고리 필터링 -->
            <if test="category != -1">
                AND category_id = #{category}
            </if>

            <!-- 최소 가격 필터링 -->
            <if test="minPrice != -1">
                AND auction_item_highest_price >= #{minPrice}
            </if>

            <!-- 최대 가격 필터링 -->
            <if test="maxPrice != -1">
                AND auction_item_highest_price &lt;= #{maxPrice}
            </if>

            <!-- 검색어 필터링 (부분 검색) -->
            <if test="searchQuery != null and searchQuery != ''">
                AND auction_item_name LIKE CONCAT('%', #{searchQuery}, '%')
            </if>
        </trim>

<!--        정렬 기준 (정렬 기준이 있을 경우만)-->
        <if test="sort != null">
            <choose>
                <when test="sort == 'likes'">
                    ORDER BY created_at ASC
<!--                    ORDER BY likes DESC-->
                </when>
                <when test="sort == 'newest'">
                    ORDER BY created_at DESC
                </when>
                <when test="sort == 'low-price'">
                    ORDER BY auction_item_highest_price ASC
                </when>
                <when test="sort == 'high-price'">
                    ORDER BY auction_item_highest_price DESC
                </when>
                <!-- 기본적으로 likes순으로 정렬 -->
                <otherwise>
                    ORDER BY likes DESC
                </otherwise>
            </choose>
        </if>

    </select>

    <select id="selectAllAuctionItem" resultType="auctionItemVO">
        SELECT
        A.*,
        COALESCE(MIN(C.file_path), '') AS file_path, -- 첫 번째
        COALESCE(B.like_count, 0) AS like_count
        FROM tbl_auction_item A
        LEFT JOIN (
            SELECT
            auction_item_id,
            COUNT(auction_item_id) AS like_count
            FROM tbl_like
            GROUP BY auction_item_id
        ) B
        ON A.auction_item_id = B.auction_item_id
        LEFT JOIN (
            SELECT
            auction_item_id,
            file_path
            FROM
            tbl_file
        ) C
        ON A.auction_item_id = C.auction_item_id
        GROUP BY
        A.auction_item_id, A.auction_item_name, A.auction_item_explain,
        A.auction_item_highest_price, A.auction_item_start_price, A.category_id,
        A.auction_item_status, A.min_bid_amount, A.user_id, B.like_count
        <include refid="searchCondition" />
        <choose>
            <when test="dto.type == 'recent'">
                ORDER BY A.created_at DESC
            </when>
            <when test="dto.type == 'like'">
                ORDER BY like_count DESC
            </when>
        </choose>
        LIMIT #{page.criteria.amount} OFFSET #{page.criteria.offset}
    </select>

    <select id="selectItemStatisticsByCondition" resultType="map">
        select
        round(avg(auction_item_highest_price),0) as avg_price,
        max(auction_item_highest_price) as max_price,
        min(auction_item_highest_price) as min_price,
        count(*) as total_count
        from tbl_auction_item A
        <include refid="searchCondition" />
    </select>

    <select id="selectMyAuctionItemList" parameterType="UserVo" resultType="auctionItemVO">
        select
            tai.auction_item_id,
            tai.user_id,
            tai.auction_item_name,
            tai.auction_item_explain,
            tai.auction_item_start_price,
            tai.auction_item_highest_price,
            to_char(tai.auction_item_end_time, 'YYYY-MM-DD') as auction_item_end_time,
            to_char(tai.created_at, 'YYYY-MM-DD') as created_at,
            tai.category_id,
            tc1.category_value as category_id_val,
            tai.auction_item_status,
            tc2.category_value as auction_item_status_val,
            tai.min_bid_amount,
            tai.updated_at,
            (SELECT COUNT(*)
             FROM tbl_auction_join taj
             WHERE taj.auction_item_id = tai.auction_item_id) AS auction_item_join_count
        from
            tbl_auction_item tai
            LEFT JOIN tbl_category tc1 ON tc1.category_detail = tai.category_id
            LEFT JOIN tbl_category tc2 ON tc2.category_detail = tai.auction_item_status
        where 1=1
        AND tai.user_id = #{userId}
        AND tai.auction_item_status IN ('201', '202')
    </select>

    <sql id="searchCondition" >
        <choose>
            <when test="page.IS_SEARCH_DTO">
                <bind name="dto" value="page"/>
            </when>
            <otherwise>
                <bind name="dto" value="page.searchDTO"/>
            </otherwise>
        </choose>
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="dto.category != null ">
                AND A.category_id = #{dto.category}
            </if>
            <if test="dto.minPrice != null">
                AND A.auction_item_highest_price &gt;= #{dto.minPrice}
            </if>
            <if test="dto.maxPrice != null">
                AND auction_item_highest_price &lt;= #{dto.maxPrice}
            </if>
            <if test="dto.searchKeyword != null">
                AND A.auction_item_name LIKE CONCAT('%', #{dto.searchKeyword}, '%')
            </if>
            <if test="dto.searchQuery != null and searchQuery.length > 0">
                AND (
                <foreach collection="dto.searchQuery" item="query" separator=" OR ">
                    A.auction_item_name LIKE CONCAT('%', #{dto.query}, '%')
                </foreach>
                )
            </if>
        </trim>
    </sql>

    <!-- 파일 등록을 위한 최근 중고 물품 가져오기 selectLastUsedItem -->
    <select id="selectLastAuctionItem">
        /* 파일 등록을 위한 최근 중고 물품 가져오기 selectLastUsedItem */
        select auction_item_id from tbl_auction_item order by auction_item_id desc limit 1
    </select>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INSERT :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 경매 물품 등록 insertAuctionItem -->
    <insert id="insertAuctionItem" parameterType="auctionItemVO">
        /* 경매 물품 등록 insertAuctionItem */
        insert into tbl_auction_item
        (user_id, auction_item_name, auction_item_explain, auction_item_start_price, auction_item_end_time, category_id, auction_item_status, min_bid_amount, auction_item_condition)
        values(#{userId}, #{auctionItemName}, #{auctionItemExplain}, #{auctionItemStartPrice}, #{auctionItemEndTime}::timestamp, #{categoryId}, '201', #{auctionItemStartPrice}, #{auctionItemCondition})
    </insert>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: UPDATE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 경매 물품 수정 updateAuctionItem -->
    <update id="updateAuctionItem" parameterType="auctionItemVO">
        /* 경매 물품 수정 updateAuctionItem */
        update tbl_used_item
        <set>
            <if test='auctionItemName != null and auctionItemName != ""'>
                auction_item_name = #{auctionItemName}
            </if>
            <if test='auctionItemExplain != null and auctionItemExplain != ""'>
                auction_item_explain = #{auctionItemExplain}
            </if>
            <if test='auctionItemStartPrice != null and auctionItemStartPrice != ""'>
                auction_item_start_price = #{auctionItemStartPrice}
            </if>
            <if test='auctionItemEndTime != null and auctionItemEndTime != ""'>
                auction_item_end_time = #{auctionItemEndTime}
            </if>
            <if test='categoryId != null and categoryId != ""'>
                category_id = #{categoryId}
            </if>
            <if test='auctionItemStatus != null and auctionItemStatus != ""'>
                auction_item_status = #{auctionItemStatus}
            </if>
            <if test='minBidAmount != null and minBidAmount != ""'>
                min_bid_amount = #{minBidAmount}
            </if>
        </set>
        where auction_item_id = #{auctionItemId}
    </update>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: DELETE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
</mapper>