<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.app.mine.mapper.UsedItemMapper">

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INCLUDE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

    <!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  QUERY  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INSERT :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 중고 물품 등록 insertUsedItem -->
    <insert id="insertUsedItem" parameterType="usedItemVO">
        /* 중고 물품 등록 insertUsedItem */
        insert into tbl_used_item(used_item_name, used_item_explain, used_item_price, used_item_place, created_at, updated_at, category_id, user_id)
        values(#{usedItemName}, #{usedItemExplain}, #{usedItemPrice}, #{usedItemPlace}, current_timestamp, current_timestamp, #{categoryId}, #{userId})
    </insert>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: UPDATE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 중고 물품 수정 updateUsedItem -->
    <update id="updateUsedItem" parameterType="usedItemVO">
        /* 중고 물품 수정 updateUsedItem */
        update tbl_used_item
        <set>
            <if test='usedItemName != null and usedItemName != ""'>
                used_item_name = #{usedItemName}
            </if>
            <if test='usedItemExplain != null and usedItemExplain != ""'>
                used_item_explain = #{usedItemExplain}
            </if>
            <if test='usedItemPrice != null and usedItemPrice != ""'>
                used_item_price = #{usedItemPrice}
            </if>
            <if test='usedItemPlace != null and usedItemPlace != ""'>
                used_item_place = #{usedItemPlace}
            </if>
            <if test='categoryId != null and categoryId != ""'>
                category_id = #{categoryId}
            </if>
            updated_at = current_timestamp
        </set>
        where used_item_id = #{usedItemId}
    </update>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: DELETE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: SELECT :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <select id="findAllUsedItem" parameterType="SearchDTO" resultType="usedItemVO">
        SELECT
        A.used_item_id,
        A.used_item_name,
        A.used_item_explain,
        A.used_item_price,
        A.updated_at,
        A.created_at,
        A.used_item_place,
        A.category_id,
        A.user_id,
        A.used_item_buyer_id,
        A.used_item_status
        FROM tbl_used_item A
        <choose>
            <when test="type == 'recent'">
                <include refid="filterCondition" />
                ORDER BY A.created_at DESC
            </when>
            <otherwise>
                JOIN (
                SELECT used_item_id, COUNT(used_item_id) AS like_count
                FROM tbl_like
                GROUP BY used_item_id
                ) B
                ON A.used_item_id = B.used_item_id
                <include refid="filterCondition" />
                ORDER BY like_count DESC
            </otherwise>
        </choose>

        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="getUsedItemCount"  resultType="int">
        <choose>
            <when test="type == 'recent'">
                SELECT COUNT(A.*) totalCount
                FROM tbl_used_item A
                <include refid="filterCondition" />
            </when>
            <otherwise>
                SELECT COUNT(*)
                FROM (
                SELECT used_item_id, COUNT(*) AS like_count
                FROM tbl_like
                GROUP BY used_item_id
                ) B
                JOIN tbl_used_item A
                ON A.used_item_id = B.used_item_id
                <include refid="filterCondition" />
            </otherwise>
        </choose>
    </select>

    <sql id="filterCondition">
        WHERE 1=1
        <!-- 카테고리 조건 -->
        <if test="category != null">
            AND A.category_id = #{category}
        </if>
        <!-- 가격 필터 조건 -->
        <if test="minPrice != null">
            AND A.used_item_price &gt;= #{minPrice}
        </if>
        <if test="maxPrice != null">
            AND A.used_item_price &lt;= #{maxPrice}
        </if>
        <!-- 검색어 조건 -->
        <if test="searchQuery != null and searchQuery.length > 0">
            AND (
            <foreach collection="searchQuery" item="query" separator="OR">
                A.used_item_name LIKE CONCAT('%', #{query}, '%')
            </foreach>
            )
        </if>
    </sql>

<!--    <select id="findAllUsedItem" parameterType="SearchDTO" resultType="usedItemVO">  &lt;!&ndash; 동적 쿼리를 이용해서, where, order by, limit 등 유연하게 설계할 예정 &ndash;&gt;-->
<!--        select A.used_item_id, used_item_name, used_item_explain, used_item_price, updated_at, created_at, used_item_place, category_id, user_id, used_item_buyer_id, used_item_status-->
<!--        <choose>-->
<!--            <when test="orderBy == 'recent'">-->
<!--                from tbl_used_item A-->
<!--                order by used_item_id desc-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                from tbl_used_item A-->
<!--                join (-->
<!--                select used_item_id, count(used_item_id) from tbl_like-->
<!--                group by used_item_id-->
<!--                ) B-->
<!--                on A.used_item_id = B.used_item_id-->
<!--                order by count desc-->
<!--            </otherwise>-->
<!--        </choose>-->
<!--        limit 12-->
<!--    </select>-->
    <select id="getMyUsedItemList" parameterType="UserVo" resultType="UsedItemVo">
        select
            tui.used_item_id,
            tui.used_item_name,
            tui.used_item_explain,
            tui.used_item_price,
            tui.used_item_place,
            tui.created_at,
            tui.updated_at,
            tui.category_id,
            tui.user_id,
            tui.used_item_buyer_id,
            tui.used_item_status,
            tu.user_email,
            tu.user_nickname,
            tc.category_value as category_id_val
        from
            tbl_used_item tui
                LEFT JOIN tbl_user tu
                          ON tu.user_id = tui.user_id
                LEFT JOIN tbl_category tc
                          ON tc.category_detail = tui.category_id
        where tui.user_id = #{userId}
    </select>
</mapper>