<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.app.mine.mapper.UsedItemMapper">

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INCLUDE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

    <!-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  QUERY  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 파일 등록을 위한 최근 중고 물품 가져오기 selectLastUsedItem -->
    <select id="selectLastUsedItem">
        /* 파일 등록을 위한 최근 중고 물품 가져오기 selectLastUsedItem */
        select used_item_id from tbl_used_item order by used_item_id desc limit 1
    </select>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: INSERT :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 중고 물품 등록 insertUsedItem -->
    <insert id="insertUsedItem" parameterType="usedItemVO">
        /* 중고 물품 등록 insertUsedItem */
        insert into tbl_used_item(used_item_name, used_item_explain, used_item_price, used_item_place, used_item_place_detail, used_item_status, category_id, user_id)
        values(#{usedItemName}, #{usedItemExplain}, #{usedItemPrice}, #{usedItemPlace}, #{usedItemPlaceDetail},
               (select category_detail from tbl_category where category_name = '상품상태' and category_value = #{usedItemStatus}), #{categoryId}, #{userId})
    </insert>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: UPDATE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <!-- 중고 물품 수정 updateUsedItem -->
    <update id="updateUsedItem" parameterType="usedItemVO">
        /* 중고 물품 수정 updateUsedItem */
        update tbl_used_item
        <set>
            <if test='usedItemName != null and usedItemName != ""'>
                used_item_name = #{usedItemName}
            </if>
            <if test='usedItemExplain != null and usedItemExplain != ""'>
                used_item_explain = #{usedItemExplain}
            </if>
            <if test='usedItemPrice != null and usedItemPrice != ""'>
                used_item_price = #{usedItemPrice}
            </if>
            <if test='usedItemPlace != null and usedItemPlace != ""'>
                used_item_place = #{usedItemPlace}
            </if>
            <if test='categoryId != null and categoryId != ""'>
                category_id = #{categoryId}
            </if>
            updated_at = current_timestamp
        </set>
        where used_item_id = #{usedItemId}
    </update>

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: DELETE :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->

    <!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: SELECT :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::  -->
    <select id="selectAllUsedItem" resultType="usedItemVO">
        SELECT
        A.used_item_id,
        A.used_item_name,
        A.used_item_explain,
        A.used_item_price,
        A.updated_at,
        A.created_at,
        A.used_item_place,
        A.category_id,
        A.user_id,
        A.used_item_buyer_id,
        A.used_item_status,
        COALESCE(MIN(C.file_path), '') AS file_path,
        COALESCE(B.like_count, 0) AS like_count,
        COALESCE(D.chat_count, 0) AS chat_count
        FROM
        tbl_used_item A
        LEFT JOIN (
        SELECT
        used_item_id,
        COUNT(used_item_id) AS like_count
        FROM
        tbl_like
        GROUP BY
        used_item_id
        ) B
        ON
        A.used_item_id = B.used_item_id
        LEFT JOIN (
        SELECT
        used_item_id,
        file_path
        FROM
        tbl_file
        ) C
        ON
        A.used_item_id = C.used_item_id
        LEFT JOIN (
        SELECT item_id, count(distinct room_id) chat_count
        FROM tbl_chatting
        WHERE item_type = 'Used'
        GROUP BY item_id
        ) D
        on A.used_item_id = D.item_id
        <include refid="searchCondition" />
        GROUP BY
        A.used_item_id, A.used_item_name, A.used_item_explain, A.used_item_price,
        A.updated_at, A.created_at, A.used_item_place, A.category_id, A.user_id,
        A.used_item_buyer_id, A.used_item_status, B.like_count, D.chat_count
        <choose>
            <when test="dto.type == 'recent'">
                ORDER BY A.created_at DESC
            </when>
            <when test="dto.type == 'like'">
                ORDER BY like_count DESC
            </when>
            <when test="dto.type == 'high'">
                ORDER BY A.used_item_place DESC
            </when>
            <when test="dto.type == 'low'">
                ORDER BY A.used_item_place ASC
            </when>
        </choose>
        LIMIT #{page.criteria.amount} OFFSET #{page.criteria.offset};
    </select>

    <select id="getUsedItemCount" resultType="int">
        <choose>
            <when test="page.type == 'recent'">
                SELECT COUNT(*) AS totalCount
                FROM tbl_used_item A
                <include refid="searchCondition" />
            </when>
            <otherwise>
                SELECT COUNT(*)
                FROM (
                SELECT used_item_id, COUNT(*) AS like_count
                FROM tbl_like
                GROUP BY used_item_id
                ) B
                RIGHT JOIN tbl_used_item A
                ON A.used_item_id = B.used_item_id
                <include refid="searchCondition" />
            </otherwise>
        </choose>
    </select>

    <select id="selectUsedItemByCondition" resultType="usedItemVO">
        SELECT
        coalesce(cnt, 0) as like_count,
        A.used_item_id,
        A.used_item_name,
        A.used_item_explain,
        A.used_item_price,
        A.updated_at,
        A.created_at,
        A.used_item_place,
        A.category_id,
        A.user_id,
        A.used_item_buyer_id,
        A.used_item_status
        FROM tbl_used_item A
        LEFT JOIN  (
            SELECT used_item_id, count(*) cnt
            FROM tbl_like
            GROUP BY used_item_id ) B
        ON A.used_item_id = B.used_item_id
        <include refid="searchCondition" />
        ORDER BY like_count DESC;
    </select>

    <select id="selectItemStatisticsByCondition" resultType="map">
        select
            round(avg(used_item_price),0) as avg_price,
            max(used_item_price) as max_price,
            min(used_item_price) as min_price,
            count(*) as total_count
        from tbl_used_item A
        <include refid="searchCondition" />
    </select>

    <select id="selectUsedItemById" resultType="map">
        select
            c.used_item_id,
            c.used_item_name,
            c.used_item_explain,
            c.used_item_price,
            c.used_item_place,
            c.updated_at,
            c.created_at,
            c.category_value as category,
            c.user_id,
            c.used_item_status,
            d.user_email,
            d.user_trust_score,
            d.user_nickname,
            ARRAY_AGG(e.file_path) AS file_paths
        from (
                 select b.*, category_value
                 from tbl_category a, tbl_used_item b
                 where a.category_detail = b.category_id
             ) c join tbl_user d
          on c.user_id = d.user_id
         left join
             (
                 select
                     file_path,
                     used_item_id
                 from
                     tbl_file
             ) e
         ON
         c.used_item_id = e.used_item_id
        where c.used_item_id = #{id}
        GROUP BY
            c.used_item_id,
            c.used_item_name,
            c.used_item_explain,
            c.used_item_price,
            c.used_item_place,
            c.updated_at,
            c.created_at,
            c.category_value,
            c.user_id,
            c.used_item_status,
            d.user_email,
            d.user_trust_score,
            d.user_nickname;
    </select>

    <!--페이징 처리 및 조건-->
    <sql id="searchCondition" >
        <choose>
            <when test="page.IS_SEARCH_DTO != null and page.IS_SEARCH_DTO">
                <bind name="dto" value="page.searchDTO"/>
            </when>
            <otherwise>
                <bind name="dto" value="page"/>
            </otherwise>
        </choose>
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="dto.category != null ">
                AND A.category_id = #{dto.category}
            </if>
            <if test="dto.minPrice != null">
                AND A.used_item_price &gt;= #{dto.minPrice}
            </if>
            <if test="dto.maxPrice != null">
                AND A.used_item_price &lt;= #{dto.maxPrice}
            </if>
            <if test="dto.searchKeyword != null">
                AND A.used_item_name LIKE CONCAT('%', #{dto.searchKeyword}, '%')
            </if>
            <if test="dto.searchQuery != null and dto.searchQuery.size > 0">
                AND (
                <foreach collection="dto.searchQuery" item="query" separator=" OR ">
                    A.used_item_name LIKE CONCAT('%', #{query}, '%')
                </foreach>
                )
            </if>
        </trim>
    </sql>

    <select id="selectMyUsedItemList" parameterType="UsedItemVO" resultType="myUsedItemDTO">
        select
            tui.used_item_id,
            tui.used_item_name,
            tui.used_item_explain,
            tui.used_item_price,
            tui.used_item_place,
            tui.created_at,
            tui.updated_at,
            tui.category_id,
            tui.user_id,
            tui.used_item_buyer_id,
            tui.used_item_status,
            tu.user_email,
            tu.user_nickname,
            tc.category_value as category_id_val,
            tui.used_item_sales_status,
            tc1.category_value AS used_item_sales_status_val
        from
            tbl_used_item tui
                LEFT JOIN tbl_user tu
                          ON tu.user_id = tui.user_id
                LEFT JOIN tbl_category tc
                          ON tc.category_detail = tui.category_id
                LEFT JOIN tbl_category tc1
                          ON tc1.category_detail = tui.used_item_sales_status
        where 1=1
        AND tui.user_id = #{userId}
        <if test="usedItemSalesStatus != null">
            AND tui.used_item_sales_status = #{usedItemSalesStatus}
        </if>
    </select>

    <select id="selectMyUsedPurchaseList" parameterType="UsedItemVO" resultType="myUsedItemDTO">
        select
        tui.used_item_id,
        tui.used_item_name,
        tui.used_item_explain,
        tui.used_item_price,
        tui.used_item_place,
        tui.created_at,
        tui.updated_at,
        tui.category_id,
        tui.user_id,
        tui.used_item_buyer_id,
        tui.used_item_status,
        tu.user_email,
        tu.user_nickname,
        tc.category_value as category_id_val,
        tui.used_item_sales_status,
        tc1.category_value AS used_item_sales_status_val
        from
        tbl_used_item tui
        LEFT JOIN tbl_user tu
        ON tu.user_id = tui.user_id
        LEFT JOIN tbl_category tc
        ON tc.category_detail = tui.category_id
        LEFT JOIN tbl_category tc1
        ON tc1.category_detail = tui.used_item_sales_status
        where 1=1
        AND tui.used_item_buyer_id = #{userId}
    </select>

    <select id="selectMyUsedLike" parameterType="UsedItemVO" resultType="myUsedItemDTO">
        select
            tl.like_id,
            tl.user_id,
            tui.used_item_id,
            tui.used_item_name,
            tui.used_item_explain,
            tui.used_item_price,
            tui.used_item_place,
            tui.created_at,
            tui.updated_at,
            tui.category_id,
            tui.used_item_buyer_id,
            tui.used_item_status,
            tui.used_item_sales_status,
            tc.category_value as category_id_val,
            tc1.category_value as used_item_sales_status_val
        from
            tbl_like tl
                left join tbl_used_item tui on tl.used_item_id = tui.used_item_id
                left join tbl_category tc on tc.category_detail = tui.category_id
                left join tbl_category tc1 on tc1.category_detail = tui.used_item_sales_status
        where tl.user_id = #{userId};
    </select>
</mapper>